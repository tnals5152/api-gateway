// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/client/grpc.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GprcInitClient is the client API for GprcInit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GprcInitClient interface {
	Connection(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	Connector(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error)
}

type gprcInitClient struct {
	cc grpc.ClientConnInterface
}

func NewGprcInitClient(cc grpc.ClientConnInterface) GprcInitClient {
	return &gprcInitClient{cc}
}

func (c *gprcInitClient) Connection(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/GprcInit/Connection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gprcInitClient) Connector(ctx context.Context, in *HttpRequest, opts ...grpc.CallOption) (*HttpResponse, error) {
	out := new(HttpResponse)
	err := c.cc.Invoke(ctx, "/GprcInit/Connector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GprcInitServer is the server API for GprcInit service.
// All implementations must embed UnimplementedGprcInitServer
// for forward compatibility
type GprcInitServer interface {
	Connection(context.Context, *Ping) (*Pong, error)
	Connector(context.Context, *HttpRequest) (*HttpResponse, error)
	mustEmbedUnimplementedGprcInitServer()
}

// UnimplementedGprcInitServer must be embedded to have forward compatible implementations.
type UnimplementedGprcInitServer struct {
}

func (UnimplementedGprcInitServer) Connection(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connection not implemented")
}
func (UnimplementedGprcInitServer) Connector(context.Context, *HttpRequest) (*HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connector not implemented")
}
func (UnimplementedGprcInitServer) mustEmbedUnimplementedGprcInitServer() {}

// UnsafeGprcInitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GprcInitServer will
// result in compilation errors.
type UnsafeGprcInitServer interface {
	mustEmbedUnimplementedGprcInitServer()
}

func RegisterGprcInitServer(s grpc.ServiceRegistrar, srv GprcInitServer) {
	s.RegisterService(&GprcInit_ServiceDesc, srv)
}

func _GprcInit_Connection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GprcInitServer).Connection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GprcInit/Connection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GprcInitServer).Connection(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _GprcInit_Connector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GprcInitServer).Connector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GprcInit/Connector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GprcInitServer).Connector(ctx, req.(*HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GprcInit_ServiceDesc is the grpc.ServiceDesc for GprcInit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GprcInit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GprcInit",
	HandlerType: (*GprcInitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connection",
			Handler:    _GprcInit_Connection_Handler,
		},
		{
			MethodName: "Connector",
			Handler:    _GprcInit_Connector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/client/grpc.proto",
}
